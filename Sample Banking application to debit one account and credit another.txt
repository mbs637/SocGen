* Sample Banking application to debit one account and credit another, also to support account enquiry.* this has been implemented in pseudo-code, for the sake of speed.*PROC	process_payment_txn  using	debit_acc_number				*	debit account number	credit_acc_number				*	credit account number	txn_amount					*	transaction value  return	error_flag					*	0 = No Error, 1 = Error, 2 = Warning	error_code					*	unique error identifier	BEGIN TRANSACTION	SELECT  acc_number, acc_name, balance FROM account AS debit_account FOR UPDATE 		WHERE debit_account.acc_number = debit_acc_number;							*	reads & locks record	CASE error_code		WHEN 0 CONTINUE				*	record read and locked		WHEN 1					*	encountered an error, identify error detail, log it, release locks			  error_flag:= 1			  error_code:= sql_error_code			  error_handling (error_code)			  log_transaction			  ROLLBACK TRANSACTION		*	release all locks avoids potential deadlocks			  EXIT		WHEN 2 					*	warning - log it.			  error_flag:= 2			  error_code:= sql_error_code			  error_handling (error_code)			  log_transaction			  CONTINUE			*	record read and locked	END CASE	IF debit_account.balance - txn_amount > 0	*	sufficient funds for txn		THEN			error_flag:= 1			error_code:=99999		*	signify insufficient funds			log_transaction			ROLLBACK TRANSACTION		*	release all locks avoids potential deadlocks			EXIT	END-IF	SELECT  acc_number, acc_name, balance FROM account AS credit_account FOR UPDATE 		WHERE credit_account.acc_number = credit_acc_number;			CASE error_code		WHEN 0 CONTINUE				*	record read and locked		WHEN 1					*	encountered an error, identify error detail, log it, release locks			  error_flag:= 1			  error_code:= sql_error_code			  error_handling (error_code)			  log_transaction			  ROLLBACK TRANSACTION		*	release all locks avoids potential deadlocks			  EXIT		WHEN 2 					*	warning - log it.			  error_flag:= 2			  error_code:= sql_error_code			  error_handling (error_code)			  log_transaction			  CONTINUE			*	record read and locked	END CASE	UPDATE debit_account	SET debit.account.balance = debit.account.balance - txn_amount;	CASE error_code		WHEN 0 CONTINUE				*	record updated successfully		WHEN 1					*	encountered an error, identify error detail, log it, release locks			  error_flag:= 1			  error_code:= sql_error_code			  error_handling (error_code)			  log_transaction			  ABORT TRANSACTION		*	release all locks and backout updates		WHEN 2 					*	warning - log it.			  error_flag:= 2			  error_code:= sql_error_code			  error_handling (error_code)			  log_transaction			  CONTINUE			*		END CASE	INSERT INTO debit.account (stmt_timestamp, stmt_acc_number, stmt_txn_amount, stmt_transaction_type)	CASE error_code		WHEN 0 CONTINUE				*	record updated successfully		WHEN 1					*	encountered an error, identify error detail, log it, release locks			  error_flag:= 1			  error_code:= sql_error_code			  error_handling (error_code)			  log_transaction			  ABORT TRANSACTION		*	release all locks and backout updates		WHEN 2 					*	warning - log it.			  error_flag:= 2			  error_code:= sql_error_code			  error_handling (error_code)			  log_transaction			  CONTINUE			*		END CASE	UPDATE credit_account	SET credit.account.balance = credit.account.balance - txn_amount;	CASE error_code		WHEN 0 CONTINUE				*	record updated successfully		WHEN 1					*	encountered an error, identify error detail, log it, release locks			  error_flag:= 1			  error_code:= sql_error_code			  error_handling (error_code)			  log_transaction			  ABORT TRANSACTION		*	release all locks and backout updates & inserts		WHEN 2 					*	warning - log it.			  error_flag:= 2			  error_code:= sql_error_code			  error_handling (error_code)			  log_transaction			  CONTINUE			*		END CASE	INSERT INTO credit.account (stmt_timestamp, stmt_acc_number, stmt_txn_amount, stmt_transaction_type)	CASE error_code		WHEN 0 COMMIT TRANSACTION		*	record updated successfully		WHEN 1					*	encountered an error, identify error detail, log it, release locks			  error_flag:= 1			  error_code:= sql_error_code			  error_handling (error_code)			  log_transaction			  ABORT TRANSACTION		*	release all locks and backout updates & inserts		WHEN 2 					*	warning - log it.			  error_flag:= 2			  error_code:= sql_error_code			  error_handling (error_code)			  log_transaction			  COMMIT TRANSACTION		*		END CASEEND process_payment_txn*ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑPROC	process_enquiry_txn  using	acc_number					*	account number	from_date					*	from date range	to_date						*	to date range  return	error_flag					*	0 = No Error, 1 = Error, 2 = Warning	error_code					*	unique error identifier	records_array (txn_date, txn_type, txn_amount, resulting_balance)	SELECT  txn_date = txn_timestamp, txn_type = type, txn_amount = amount, txn_balance = balance FROM account		WHERE txn_date >= from_date and txn_date <= to_date;

	CASE error_code		WHEN 0 CONTINUE				*	record updated successfully		WHEN 1					*	encountered an error, identify error detail, log it			  error_flag:= 1			  error_code:= sql_error_code			  error_handling (error_code)			  log_transaction		WHEN 2 					*	warning - log it.			  error_flag:= 2			  error_code:= sql_error_code			  error_handling (error_code)			  log_transaction			  				*		END CASEEND process_payment_txn** Standard Routines*ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑPROC log_Transaction					*	Need to log who, what, when outside of RDBMS transaction atomicity.  using	user_name					*	String containing user_name (who)	transaction_type				*	Integer defining transaction type (what)	transaction_content				*	string containing details of the transaction (more what - a/c num, amount, etc	ip_addr						*	ip_address, workstation address, (where)	txn_timestamp					*	Timestamp (when)  return	error_flag					*	0 = No Error, 1 = Error, 2 = Warning	error_code					*	unique error identifier	WRITE fn_log (xn_timestamp, user_name, transaction_type, txn_timestamp, ip_addr, transaction_content, error_code)END log_TransactionPROC error_handling  using	error_code					*	error code returned to another procedure  return	timestamp					*	GMT timestamp	error_text					*	error text from list of all errors	IMPORT datetime.now	READ fn_error_codes (error_code, error_text)END error_handling PROC get_timestamp			  return	timestamp					*	GMT timestamp	IMPORT datetime.nowEND get_timestamp